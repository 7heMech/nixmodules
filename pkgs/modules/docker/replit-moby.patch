diff --git a/builder/builder-next/executor_unix.go b/builder/builder-next/executor_unix.go
index 4a1d93c25f..25b0594764 100644
--- a/builder/builder-next/executor_unix.go
+++ b/builder/builder-next/executor_unix.go
@@ -24,7 +24,9 @@ import (
 	"github.com/sirupsen/logrus"
 )
 
-const networkName = "bridge"
+// Replit mod: We don't have a bridge, so forcing users to specify `--network=host`
+// every build command gets old real fast.
+const networkName = "host"
 
 func newExecutor(root, cgroupParent string, net *libnetwork.Controller, dnsConfig *oci.DNSConfig, rootless bool, idmap idtools.IdentityMapping, apparmorProfile string) (executor.Executor, error) {
 	netRoot := filepath.Join(root, "net")
@@ -53,8 +55,9 @@ func newExecutor(root, cgroupParent string, net *libnetwork.Controller, dnsConfi
 	}
 
 	return runcexecutor.New(runcexecutor.Opt{
-		Root:                filepath.Join(root, "executor"),
-		CommandCandidates:   []string{"runc"},
+		Root: filepath.Join(root, "executor"),
+		// Replit mod: Use Replit's version of runc
+		CommandCandidates:   []string{"replit-runc"},
 		DefaultCgroupParent: cgroupParent,
 		Rootless:            rootless,
 		NoPivot:             os.Getenv("DOCKER_RAMDISK") != "",
diff --git a/cmd/dockerd/daemon.go b/cmd/dockerd/daemon.go
index 50193d5f97..d8f43e60d7 100644
--- a/cmd/dockerd/daemon.go
+++ b/cmd/dockerd/daemon.go
@@ -8,7 +8,6 @@ import (
 	"net/http"
 	"os"
 	"path/filepath"
-	"runtime"
 	"sort"
 	"strings"
 	"sync"
@@ -123,10 +122,11 @@ func (cli *DaemonCli) start(opts *daemonOptions) (err error) {
 		}
 	}
 
+	// Replit mod: don't error out when running in rootless mode.
 	// return human-friendly error before creating files
-	if runtime.GOOS == "linux" && os.Geteuid() != 0 {
-		return fmt.Errorf("dockerd needs to be started with root privileges. To run dockerd in rootless mode as an unprivileged user, see https://docs.docker.com/go/rootless/")
-	}
+	// if runtime.GOOS == "linux" && os.Geteuid() != 0 {
+	// 	return fmt.Errorf("dockerd needs to be started with root privileges. To run dockerd in rootless mode as an unprivileged user, see https://docs.docker.com/go/rootless/")
+	// }
 
 	if err := setDefaultUmask(); err != nil {
 		return err
diff --git a/libnetwork/controller.go b/libnetwork/controller.go
index cd5ad761c9..090e09835e 100644
--- a/libnetwork/controller.go
+++ b/libnetwork/controller.go
@@ -929,7 +929,8 @@ func (c *Controller) NewSandbox(containerID string, options ...SandboxOption) (*
 
 		if err != nil {
 			c.sboxOnce = sync.Once{}
-			return nil, fmt.Errorf("failed to create default sandbox: %v", err)
+			// Replit mod: we don't have network sandboxing.
+			logrus.WithError(err).Warn("failed to create default sandbox")
 		}
 
 		sb.osSbox = c.defOsSbox
diff --git a/libnetwork/osl/interface_linux.go b/libnetwork/osl/interface_linux.go
index ee1b4ab842..85d4896b5b 100644
--- a/libnetwork/osl/interface_linux.go
+++ b/libnetwork/osl/interface_linux.go
@@ -1,3 +1,6 @@
+//go:build !replit
+// +build !replit
+
 package osl
 
 import (
diff --git a/libnetwork/osl/namespace_linux.go b/libnetwork/osl/namespace_linux.go
index d7d2fe2d63..f6d4bb9672 100644
--- a/libnetwork/osl/namespace_linux.go
+++ b/libnetwork/osl/namespace_linux.go
@@ -1,3 +1,6 @@
+//go:build !replit
+// +build !replit
+
 package osl
 
 import (
diff --git a/libnetwork/osl/neigh_linux.go b/libnetwork/osl/neigh_linux.go
index e46b12a89f..c7d88651f2 100644
--- a/libnetwork/osl/neigh_linux.go
+++ b/libnetwork/osl/neigh_linux.go
@@ -1,3 +1,6 @@
+//go:build !replit
+// +build !replit
+
 package osl
 
 import (
diff --git a/libnetwork/osl/options_linux.go b/libnetwork/osl/options_linux.go
index 818669647f..e3507dd69e 100644
--- a/libnetwork/osl/options_linux.go
+++ b/libnetwork/osl/options_linux.go
@@ -1,3 +1,6 @@
+//go:build !replit
+// +build !replit
+
 package osl
 
 import "net"
diff --git a/libnetwork/osl/route_linux.go b/libnetwork/osl/route_linux.go
index c2a6390956..d04f07f376 100644
--- a/libnetwork/osl/route_linux.go
+++ b/libnetwork/osl/route_linux.go
@@ -1,3 +1,6 @@
+//go:build !replit
+// +build !replit
+
 package osl
 
 import (
diff --git a/libnetwork/osl/sandbox_replit.go b/libnetwork/osl/sandbox_replit.go
new file mode 100644
index 0000000000..589ae12aaa
--- /dev/null
+++ b/libnetwork/osl/sandbox_replit.go
@@ -0,0 +1,111 @@
+//go:build replit
+// +build replit
+
+package osl
+
+import (
+	"fmt"
+	"net"
+
+	"github.com/docker/docker/libnetwork/types"
+)
+
+type sandboxNoOp struct {
+	key string
+}
+
+type nwIface struct{}
+
+type neigh struct{}
+
+// NewSandbox provides a new sandbox instance created in an os specific way
+// provided a key which uniquely identifies the sandbox
+func NewSandbox(key string, osCreate, isRestore bool) (Sandbox, error) {
+	return &sandboxNoOp{key: key}, nil
+}
+
+// GenerateKey generates a sandbox key based on the passed
+// container id.
+func GenerateKey(containerID string) string { return containerID }
+
+// GC triggers garbage collection of namespace path right away
+// and waits for it.
+func GC() {}
+
+// GetSandboxForExternalKey returns sandbox object for the supplied path
+func GetSandboxForExternalKey(path string, key string) (Sandbox, error) {
+	return nil, nil
+}
+
+// SetBasePath sets the base url prefix for the ns path
+func SetBasePath(path string) {}
+
+// NeighborSearchError indicates that the neighbor is already present
+type NeighborSearchError struct {
+	ip      net.IP
+	mac     net.HardwareAddr
+	present bool
+}
+
+func (n NeighborSearchError) Error() string {
+	return fmt.Sprintf("Search neighbor failed for IP %v, mac %v, present in db:%t", n.ip, n.mac, n.present)
+}
+
+func (s *sandboxNoOp) Key() string { return s.key }
+func (*sandboxNoOp) AddInterface(SrcName string, DstPrefix string, options ...IfaceOption) error {
+	return nil
+}
+func (*sandboxNoOp) SetGateway(gw net.IP) error                       { return nil }
+func (*sandboxNoOp) SetGatewayIPv6(gw net.IP) error                   { return nil }
+func (*sandboxNoOp) UnsetGateway() error                              { return nil }
+func (*sandboxNoOp) UnsetGatewayIPv6() error                          { return nil }
+func (*sandboxNoOp) GetLoopbackIfaceName() string                     { return "lo" }
+func (*sandboxNoOp) AddAliasIP(ifName string, ip *net.IPNet) error    { return nil }
+func (*sandboxNoOp) RemoveAliasIP(ifName string, ip *net.IPNet) error { return nil }
+func (*sandboxNoOp) DisableARPForVIP(ifName string) error             { return nil }
+func (*sandboxNoOp) AddStaticRoute(*types.StaticRoute) error          { return nil }
+func (*sandboxNoOp) RemoveStaticRoute(*types.StaticRoute) error       { return nil }
+func (*sandboxNoOp) AddNeighbor(dstIP net.IP, dstMac net.HardwareAddr, force bool, option ...NeighOption) error {
+	return nil
+}
+func (*sandboxNoOp) DeleteNeighbor(dstIP net.IP, dstMac net.HardwareAddr, osDelete bool) error {
+	return nil
+}
+func (*sandboxNoOp) NeighborOptions() NeighborOptionSetter { return &neighborOptionSetterNoOp{} }
+func (*sandboxNoOp) InterfaceOptions() IfaceOptionSetter   { return &ifaceOptionSetterNoOp{} }
+func (*sandboxNoOp) InvokeFunc(func()) error               { return nil }
+func (*sandboxNoOp) Info() Info                            { return &infoNoOp{} }
+func (*sandboxNoOp) Destroy() error                        { return nil }
+func (*sandboxNoOp) Restore(ifsopt map[Iface][]IfaceOption, routes []*types.StaticRoute, gw net.IP, gw6 net.IP) error {
+	return nil
+}
+func (*sandboxNoOp) ApplyOSTweaks([]SandboxType) {}
+
+type infoNoOp struct{}
+
+func (*infoNoOp) Interfaces() []Interface { return nil }
+func (*infoNoOp) Gateway() net.IP {
+	// This is the hardcoded IPv4 gateway in Repls.
+	return net.IPv4(172, 31, 196, 1)
+}
+func (*infoNoOp) GatewayIPv6() net.IP                { return nil }
+func (*infoNoOp) StaticRoutes() []*types.StaticRoute { return nil }
+
+type neighborOptionSetterNoOp struct{}
+
+func neighOptionNoOp(nh *neigh) {}
+
+func (*neighborOptionSetterNoOp) LinkName(string) NeighOption { return neighOptionNoOp }
+func (*neighborOptionSetterNoOp) Family(int) NeighOption      { return neighOptionNoOp }
+
+type ifaceOptionSetterNoOp struct{}
+
+func ifaceOptionNoOp(i *nwIface) {}
+
+func (*ifaceOptionSetterNoOp) Bridge(bool) IfaceOption                     { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) MacAddress(net.HardwareAddr) IfaceOption     { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) Address(*net.IPNet) IfaceOption              { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) AddressIPv6(*net.IPNet) IfaceOption          { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) LinkLocalAddresses([]*net.IPNet) IfaceOption { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) Master(string) IfaceOption                   { return ifaceOptionNoOp }
+func (*ifaceOptionSetterNoOp) Routes([]*net.IPNet) IfaceOption             { return ifaceOptionNoOp }
diff --git a/pkg/archive/archive.go b/pkg/archive/archive.go
index 34361a24ac..6154b7a65c 100644
--- a/pkg/archive/archive.go
+++ b/pkg/archive/archive.go
@@ -13,6 +13,7 @@ import (
 	"io"
 	"os"
 	"os/exec"
+	"path"
 	"path/filepath"
 	"runtime"
 	"strconv"
@@ -70,6 +71,8 @@ type (
 		// replaced with the matching name from this map.
 		RebaseNames map[string]string
 		InUserNS    bool
+		// Replit mod: we don't have access to chroot, so make the protection in a best-effort fashion.
+		Root string
 	}
 )
 
@@ -1092,6 +1095,10 @@ loop:
 		// This keeps "../" as-is, but normalizes "/../" to "/". Or Windows:
 		// This keeps "..\" as-is, but normalizes "\..\" to "\".
 		hdr.Name = filepath.Clean(hdr.Name)
+		// Replit mod: we don't chroot, so always make sure this is normalized to be within the chroot.
+		if options.Root != "" {
+			hdr.Name = path.Join(options.Root, path.Clean(path.Join("/", hdr.Name))[1:])
+		}
 
 		for _, exclude := range options.ExcludePatterns {
 			if strings.HasPrefix(hdr.Name, exclude) {
diff --git a/pkg/chrootarchive/archive_unix.go b/pkg/chrootarchive/archive_unix.go
index 1e0e2382ec..28ba0e1737 100644
--- a/pkg/chrootarchive/archive_unix.go
+++ b/pkg/chrootarchive/archive_unix.go
@@ -27,12 +27,10 @@ func invokeUnpack(decompressedArchive io.Reader, dest string, options *archive.T
 		return err
 	}
 
-	done := make(chan error)
-	err = goInChroot(root, func() { done <- archive.Unpack(decompressedArchive, relDest, options) })
-	if err != nil {
-		return err
-	}
-	return <-done
+	// Replit mod: we don't have access to chroot.
+	newOptions := *options
+	newOptions.Root = root
+	return archive.Unpack(decompressedArchive, relDest, &newOptions)
 }
 
 func invokePack(srcPath string, options *archive.TarOptions, root string) (io.ReadCloser, error) {
@@ -46,14 +44,14 @@ func invokePack(srcPath string, options *archive.TarOptions, root string) (io.Re
 		relSrc += "/"
 	}
 
-	tb, err := archive.NewTarballer(relSrc, options)
+	// Replit mod: we don't have access to chroot.
+	newOptions := *options
+	newOptions.Root = root
+	tb, err := archive.NewTarballer(srcPath, &newOptions)
 	if err != nil {
 		return nil, errors.Wrap(err, "error processing tar file")
 	}
-	err = goInChroot(root, tb.Do)
-	if err != nil {
-		return nil, errors.Wrap(err, "could not chroot")
-	}
+	tb.Do()
 	return tb.Reader(), nil
 }
 
