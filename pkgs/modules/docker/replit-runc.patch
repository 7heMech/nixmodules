diff --git a/init.go b/init.go
index 79336306..ec47f694 100644
--- a/init.go
+++ b/init.go
@@ -2,15 +2,46 @@ package main
 
 import (
 	"os"
+	"syscall"
+	"time"
 
-	"github.com/opencontainers/runc/libcontainer"
-	_ "github.com/opencontainers/runc/libcontainer/nsenter"
+	"github.com/sirupsen/logrus"
 )
 
 func init() {
 	if len(os.Args) > 1 && os.Args[1] == "init" {
-		// This is the golang entry point for runc init, executed
-		// before main() but after libcontainer/nsenter's nsexec().
-		libcontainer.Init()
+		// Replit mod: we recruit the help of the roci binary to
+		// have the container be setup for us.
+		systemLogFile, err := os.OpenFile("/tmp/runc.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND|os.O_SYNC, 0o644)
+		if err != nil {
+			panic(err)
+		}
+		logrus.SetOutput(systemLogFile)
+
+		logrus.Info("running roci")
+
+		// In Replit, we just ask roci to initialize the container for us.
+
+		args := []string{"/usr/bin/roci", "runc", "init"}
+		env := os.Environ()
+		err = syscall.Exec(
+			args[0],
+			args,
+			env,
+		)
+		if err != nil {
+			logrus.
+				WithError(err).
+				WithField("source", "runc").
+				WithField("env", env).
+				Error("roci failed, chilling a bit")
+			time.Sleep(1 * time.Second)
+			logrus.
+				WithError(err).
+				WithField("source", "runc").
+				Errorf("roci %q", args)
+			os.Exit(1)
+		}
+		os.Exit(0)
 	}
 }
diff --git a/libcontainer/configs/validate/rootless.go b/libcontainer/configs/validate/rootless.go
index 6d32704a..b00e4533 100644
--- a/libcontainer/configs/validate/rootless.go
+++ b/libcontainer/configs/validate/rootless.go
@@ -1,10 +1,6 @@
 package validate
 
 import (
-	"errors"
-	"strconv"
-	"strings"
-
 	"github.com/opencontainers/runc/libcontainer/configs"
 )
 
@@ -38,53 +34,13 @@ func hasIDMapping(id int, mappings []configs.IDMap) bool {
 }
 
 func rootlessEUIDMappings(config *configs.Config) error {
-	if !config.Namespaces.Contains(configs.NEWUSER) {
-		return errors.New("rootless container requires user namespaces")
-	}
-
-	if len(config.UIDMappings) == 0 {
-		return errors.New("rootless containers requires at least one UID mapping")
-	}
-	if len(config.GIDMappings) == 0 {
-		return errors.New("rootless containers requires at least one GID mapping")
-	}
+	// Replit mod: This is handled outside of the container.
 	return nil
 }
 
 // rootlessEUIDMount verifies that all mounts have valid uid=/gid= options,
 // i.e. their arguments has proper ID mappings.
 func rootlessEUIDMount(config *configs.Config) error {
-	// XXX: We could whitelist allowed devices at this point, but I'm not
-	//      convinced that's a good idea. The kernel is the best arbiter of
-	//      access control.
-
-	for _, mount := range config.Mounts {
-		// Check that the options list doesn't contain any uid= or gid= entries
-		// that don't resolve to root.
-		for _, opt := range strings.Split(mount.Data, ",") {
-			if str := strings.TrimPrefix(opt, "uid="); len(str) < len(opt) {
-				uid, err := strconv.Atoi(str)
-				if err != nil {
-					// Ignore unknown mount options.
-					continue
-				}
-				if !hasIDMapping(uid, config.UIDMappings) {
-					return errors.New("cannot specify uid= mount options for unmapped uid in rootless containers")
-				}
-			}
-
-			if str := strings.TrimPrefix(opt, "gid="); len(str) < len(opt) {
-				gid, err := strconv.Atoi(str)
-				if err != nil {
-					// Ignore unknown mount options.
-					continue
-				}
-				if !hasIDMapping(gid, config.GIDMappings) {
-					return errors.New("cannot specify gid= mount options for unmapped gid in rootless containers")
-				}
-			}
-		}
-	}
-
+	// Replit mod: This is handled outside of the container.
 	return nil
 }
diff --git a/libcontainer/container_linux.go b/libcontainer/container_linux.go
index c941239b..e58468e4 100644
--- a/libcontainer/container_linux.go
+++ b/libcontainer/container_linux.go
@@ -500,6 +500,21 @@ func (c *Container) commandTemplate(p *Process, childInitPipe *os.File, childLog
 	if p.LogLevel != "" {
 		cmd.Env = append(cmd.Env, "_LIBCONTAINER_LOGLEVEL="+p.LogLevel)
 	}
+	// Replit mod: we want to be able to get the configuration from roci. So we
+	// pass the current directory as an extra environment variable so that it can
+	// find it: Normally libcontainer will have the rootfs as a sibling of the
+	// config.json, but Docker does not believe in that level of uniformity.
+	wd, err := os.Getwd()
+	if err == nil {
+		cmd.Env = append(cmd.Env, "_REPLIT_CONFIG_JSON="+path.Join(wd, "config.json"))
+	}
+	// Replit mod: replit-shim-runc starts one reaper socket per instance.
+	runtimeDir := os.Getenv("XDG_RUNTIME_DIR")
+	if runtimeDir == "" {
+			runtimeDir = "/run"
+	}
+	externalReapsSocketPath := path.Join(runtimeDir, fmt.Sprintf("containerd/s/%s-reaper.sock", c.id))
+	cmd.Env = append(cmd.Env, "_REPLIT_REAPER_SOCKET="+externalReapsSocketPath)
 
 	// NOTE: when running a container with no PID namespace and the parent process spawning the container is
 	// PID1 the pdeathsig is being delivered to the container's init process by the kernel for some reason
diff --git a/libcontainer/factory_linux.go b/libcontainer/factory_linux.go
index 4cb4a88b..299316e2 100644
--- a/libcontainer/factory_linux.go
+++ b/libcontainer/factory_linux.go
@@ -165,6 +165,15 @@ func loadState(root string) (*State, error) {
 	if err := json.NewDecoder(f).Decode(&state); err != nil {
 		return nil, err
 	}
+	// Replit mod: prevent adding net namespaces.
+	for i := 0; i < len(state.Config.Namespaces); i++ {
+		if state.Config.Namespaces[i].Type == configs.NEWNET {
+			state.Config.Namespaces = append(state.Config.Namespaces[:i], state.Config.Namespaces[i+1:]...)
+			i--
+		}
+	}
+	state.Config.Networks = nil
+	state.Config.Routes = nil
 	return state, nil
 }
 
diff --git a/libcontainer/process_linux.go b/libcontainer/process_linux.go
index 8785d657..328b27f8 100644
--- a/libcontainer/process_linux.go
+++ b/libcontainer/process_linux.go
@@ -162,62 +162,8 @@ func (p *setnsProcess) start() (retErr error) {
 		return fmt.Errorf("error writing config to pipe: %w", err)
 	}
 
-	ierr := parseSync(p.messageSockPair.parent, func(sync *syncT) error {
-		switch sync.Type {
-		case procReady:
-			// This shouldn't happen.
-			panic("unexpected procReady in setns")
-		case procHooks:
-			// This shouldn't happen.
-			panic("unexpected procHooks in setns")
-		case procSeccomp:
-			if p.config.Config.Seccomp.ListenerPath == "" {
-				return errors.New("seccomp listenerPath is not set")
-			}
-			if sync.Arg == nil {
-				return fmt.Errorf("sync %q is missing an argument", sync.Type)
-			}
-			var srcFd int
-			if err := json.Unmarshal(*sync.Arg, &srcFd); err != nil {
-				return fmt.Errorf("sync %q passed invalid fd arg: %w", sync.Type, err)
-			}
-			seccompFd, err := pidGetFd(p.pid(), srcFd)
-			if err != nil {
-				return fmt.Errorf("sync %q get fd %d from child failed: %w", sync.Type, srcFd, err)
-			}
-			defer seccompFd.Close()
-			// We have a copy, the child can keep working. We don't need to
-			// wait for the seccomp notify listener to get the fd before we
-			// permit the child to continue because the child will happily wait
-			// for the listener if it hits SCMP_ACT_NOTIFY.
-			if err := writeSync(p.messageSockPair.parent, procSeccompDone); err != nil {
-				return err
-			}
-
-			bundle, annotations := utils.Annotations(p.config.Config.Labels)
-			containerProcessState := &specs.ContainerProcessState{
-				Version:  specs.Version,
-				Fds:      []string{specs.SeccompFdName},
-				Pid:      p.cmd.Process.Pid,
-				Metadata: p.config.Config.Seccomp.ListenerMetadata,
-				State: specs.State{
-					Version:     specs.Version,
-					ID:          p.config.ContainerID,
-					Status:      specs.StateRunning,
-					Pid:         p.initProcessPid,
-					Bundle:      bundle,
-					Annotations: annotations,
-				},
-			}
-			if err := sendContainerProcessState(p.config.Config.Seccomp.ListenerPath,
-				containerProcessState, seccompFd); err != nil {
-				return err
-			}
-		default:
-			return errors.New("invalid JSON payload from child")
-		}
-		return nil
-	})
+	// Replit mod: our runc implementation does not send this message and instead jumps directly onto the next stage.
+	var ierr error
 
 	if err := unix.Shutdown(int(p.messageSockPair.parent.Fd()), unix.SHUT_WR); err != nil {
 		return &os.PathError{Op: "shutdown", Path: "(init pipe)", Err: err}
@@ -514,6 +460,38 @@ func (p *initProcess) start() (retErr error) {
 			if err := setupRlimits(p.config.Rlimits, p.pid()); err != nil {
 				return fmt.Errorf("error setting rlimits for ready process: %w", err)
 			}
+			// Replit mod: call prestart and CreateRuntime hooks.
+			// Our implementation of the runc init is run in a separate
+			// binary and therefore we need to still run this code here.
+			if !p.config.Config.Namespaces.Contains(configs.NEWNS) {
+				// Setup cgroup before the hook, so that the prestart and CreateRuntime hook could apply cgroup permissions.
+				if err := p.manager.Set(p.config.Config.Cgroups.Resources); err != nil {
+					return fmt.Errorf("error setting cgroup config for ready process: %w", err)
+				}
+				if p.intelRdtManager != nil {
+					if err := p.intelRdtManager.Set(p.config.Config); err != nil {
+						return fmt.Errorf("error setting Intel RDT config for ready process: %w", err)
+					}
+				}
+
+				if len(p.config.Config.Hooks) != 0 {
+					s, err := p.container.currentOCIState()
+					if err != nil {
+						return err
+					}
+					// initProcessStartTime hasn't been set yet.
+					s.Pid = p.cmd.Process.Pid
+					s.Status = specs.StateCreating
+					hooks := p.config.Config.Hooks
+
+					if err := hooks.Run(configs.Prestart, s); err != nil {
+						return err
+					}
+					if err := hooks.Run(configs.CreateRuntime, s); err != nil {
+						return err
+					}
+				}
+			}
 
 			// generate a timestamp indicating when the container was started
 			p.container.created = time.Now().UTC()
diff --git a/signals.go b/signals.go
index e0bc7c61..19401ac2 100644
--- a/signals.go
+++ b/signals.go
@@ -1,8 +1,12 @@
 package main
 
 import (
+	"encoding/json"
+	"fmt"
+	"net"
 	"os"
 	"os/signal"
+	"path"
 
 	"github.com/opencontainers/runc/libcontainer"
 	"github.com/opencontainers/runc/libcontainer/system"
@@ -18,8 +22,31 @@ const signalBufferSize = 2048
 // while still forwarding all other signals to the process.
 // If notifySocket is present, use it to read systemd notifications from the container and
 // forward them to notifySocketHost.
-func newSignalHandler(enableSubreaper bool, notifySocket *notifySocket) *signalHandler {
+func newSignalHandler(enableSubreaper bool, notifySocket *notifySocket, id string) *signalHandler {
+	// Replit mod: since we can't be a subreaper because the containers are not our
+	// children, we install an external subreaper.
+	var reaperSocket *net.UnixListener
 	if enableSubreaper {
+		runtimeDir := os.Getenv("XDG_RUNTIME_DIR")
+		if runtimeDir == "" {
+			runtimeDir = "/run"
+		}
+		// Even if containerd had set up its own reaper socket, the
+		// intention by setting the subreaper is that this process
+		// will get the signal that the process has died. When that
+		// happens, we'll completely overwrite the reaper socket.
+		reaperPath := path.Join(runtimeDir, fmt.Sprintf("containerd/s/%s-reaper.sock", id))
+		os.MkdirAll(path.Dir(reaperPath), 0o700)
+		os.Remove(reaperPath)
+		var err error
+		reaperSocket, err = net.ListenUnix("unix", &net.UnixAddr{
+			Name: reaperPath,
+			Net:  "unix",
+		})
+		if err != nil {
+			logrus.WithError(err).Warn("failed to listen on subreaper socket")
+		}
+
 		// set us as the subreaper before registering the signal handler for the container
 		if err := system.SetSubreaper(1); err != nil {
 			logrus.Warn(err)
@@ -33,6 +60,7 @@ func newSignalHandler(enableSubreaper bool, notifySocket *notifySocket) *signalH
 	return &signalHandler{
 		signals:      s,
 		notifySocket: notifySocket,
+		reaperSocket: reaperSocket,
 	}
 }
 
@@ -46,6 +74,7 @@ type exit struct {
 type signalHandler struct {
 	signals      chan os.Signal
 	notifySocket *notifySocket
+	reaperSocket *net.UnixListener
 }
 
 // forward handles the main signal event loop forwarding, resizing, or reaping depending
@@ -71,43 +100,86 @@ func (h *signalHandler) forward(process *libcontainer.Process, tty *tty, detach
 		go func() { _ = h.notifySocket.run(0) }()
 	}
 
+	// Replit mod: listen to children exiting.
+	type reaperStatus struct {
+		Pid    int `json:"pid"`
+		Status int `json:"status"`
+	}
+	reaperChan := make(chan reaperStatus, 1)
+	if h.reaperSocket != nil {
+		go func() {
+			for {
+				sock, err := h.reaperSocket.Accept()
+				if err != nil {
+					logrus.WithError(err).Error("failed to accept reaper socket")
+					return
+				}
+				var st reaperStatus
+				if err := json.NewDecoder(sock).Decode(&st); err != nil {
+					logrus.WithError(err).Error("failed to decode reaper message")
+					continue
+				}
+				reaperChan <- st
+			}
+		}()
+	}
+
 	// Perform the initial tty resize. Always ignore errors resizing because
 	// stdout might have disappeared (due to races with when SIGHUP is sent).
 	_ = tty.resize()
 	// Handle and forward signals.
-	for s := range h.signals {
-		switch s {
-		case unix.SIGWINCH:
-			// Ignore errors resizing, as above.
-			_ = tty.resize()
-		case unix.SIGCHLD:
-			exits, err := h.reap()
-			if err != nil {
-				logrus.Error(err)
+L:
+	for {
+		select {
+		case st := <-reaperChan:
+			logrus.WithFields(logrus.Fields{
+				"pid":    st.Pid,
+				"status": st.Status,
+			}).Debug("process exited")
+			if st.Pid == pid1 {
+				// call Wait() on the process even though we already have the exit
+				// status because we must ensure that any of the go specific process
+				// fun such as flushing pipes are complete before we return.
+				_, _ = process.Wait()
+				return st.Status, nil
 			}
-			for _, e := range exits {
-				logrus.WithFields(logrus.Fields{
-					"pid":    e.pid,
-					"status": e.status,
-				}).Debug("process exited")
-				if e.pid == pid1 {
-					// call Wait() on the process even though we already have the exit
-					// status because we must ensure that any of the go specific process
-					// fun such as flushing pipes are complete before we return.
-					_, _ = process.Wait()
-					return e.status, nil
-				}
+		case s, ok := <-h.signals:
+			if !ok {
+				break L
 			}
-		case unix.SIGURG:
-			// SIGURG is used by go runtime for async preemptive
-			// scheduling, so runc receives it from time to time,
-			// and it should not be forwarded to the container.
-			// Do nothing.
-		default:
-			us := s.(unix.Signal)
-			logrus.Debugf("forwarding signal %d (%s) to %d", int(us), unix.SignalName(us), pid1)
-			if err := unix.Kill(pid1, us); err != nil {
-				logrus.Error(err)
+			switch s {
+			case unix.SIGWINCH:
+				// Ignore errors resizing, as above.
+				_ = tty.resize()
+			case unix.SIGCHLD:
+				exits, err := h.reap()
+				if err != nil {
+					logrus.Error(err)
+				}
+				for _, e := range exits {
+					logrus.WithFields(logrus.Fields{
+						"pid":    e.pid,
+						"status": e.status,
+					}).Debug("process exited")
+					if e.pid == pid1 {
+						// call Wait() on the process even though we already have the exit
+						// status because we must ensure that any of the go specific process
+						// fun such as flushing pipes are complete before we return.
+						_, _ = process.Wait()
+						return e.status, nil
+					}
+				}
+			case unix.SIGURG:
+				// SIGURG is used by go runtime for async preemptive
+				// scheduling, so runc receives it from time to time,
+				// and it should not be forwarded to the container.
+				// Do nothing.
+			default:
+				us := s.(unix.Signal)
+				logrus.Debugf("forwarding signal %d (%s) to %d", int(us), unix.SignalName(us), pid1)
+				if err := unix.Kill(pid1, us); err != nil {
+					logrus.Error(err)
+				}
 			}
 		}
 	}
diff --git a/utils_linux.go b/utils_linux.go
index 0f787cb3..9e5ba318 100644
--- a/utils_linux.go
+++ b/utils_linux.go
@@ -180,6 +180,15 @@ func createContainer(context *cli.Context, id string, spec *specs.Spec) (*libcon
 	if err != nil {
 		return nil, err
 	}
+	// Replit mod: prevent adding net namespaces.
+	for i := 0; i < len(config.Namespaces); i++ {
+		if config.Namespaces[i].Type == configs.NEWNET {
+			config.Namespaces = append(config.Namespaces[:i], config.Namespaces[i+1:]...)
+			i--
+		}
+	}
+	config.Networks = nil
+	config.Routes = nil
 
 	root := context.GlobalString("root")
 	return libcontainer.Create(root, id, config)
@@ -243,7 +252,9 @@ func (r *runner) run(config *specs.Process) (int, error) {
 	// Setting up IO is a two stage process. We need to modify process to deal
 	// with detaching containers, and then we get a tty after the container has
 	// started.
-	handler := newSignalHandler(r.enableSubreaper, r.notifySocket)
+	// Replit mod: Pass the container ID to the signal handler so that it can
+	// create the reaper socket if needed.
+	handler := newSignalHandler(r.enableSubreaper, r.notifySocket, r.container.ID())
 	tty, err := setupIO(process, rootuid, rootgid, config.Terminal, detach, r.consoleSocket)
 	if err != nil {
 		return -1, err
